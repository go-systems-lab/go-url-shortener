// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/url/url.proto

package url

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for URLShortener service

type URLShortenerService interface {
	ShortenURL(ctx context.Context, in *ShortenRequest, opts ...client.CallOption) (*ShortenResponse, error)
	GetURLInfo(ctx context.Context, in *GetURLRequest, opts ...client.CallOption) (*URLInfo, error)
	DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...client.CallOption) (*DeleteResponse, error)
	GetUserURLs(ctx context.Context, in *GetUserURLsRequest, opts ...client.CallOption) (*GetUserURLsResponse, error)
	UpdateURL(ctx context.Context, in *UpdateURLRequest, opts ...client.CallOption) (*UpdateURLResponse, error)
}

type uRLShortenerService struct {
	c    client.Client
	name string
}

func NewURLShortenerService(name string, c client.Client) URLShortenerService {
	return &uRLShortenerService{
		c:    c,
		name: name,
	}
}

func (c *uRLShortenerService) ShortenURL(ctx context.Context, in *ShortenRequest, opts ...client.CallOption) (*ShortenResponse, error) {
	req := c.c.NewRequest(c.name, "URLShortener.ShortenURL", in)
	out := new(ShortenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerService) GetURLInfo(ctx context.Context, in *GetURLRequest, opts ...client.CallOption) (*URLInfo, error) {
	req := c.c.NewRequest(c.name, "URLShortener.GetURLInfo", in)
	out := new(URLInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerService) DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "URLShortener.DeleteURL", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerService) GetUserURLs(ctx context.Context, in *GetUserURLsRequest, opts ...client.CallOption) (*GetUserURLsResponse, error) {
	req := c.c.NewRequest(c.name, "URLShortener.GetUserURLs", in)
	out := new(GetUserURLsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerService) UpdateURL(ctx context.Context, in *UpdateURLRequest, opts ...client.CallOption) (*UpdateURLResponse, error) {
	req := c.c.NewRequest(c.name, "URLShortener.UpdateURL", in)
	out := new(UpdateURLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for URLShortener service

type URLShortenerHandler interface {
	ShortenURL(context.Context, *ShortenRequest, *ShortenResponse) error
	GetURLInfo(context.Context, *GetURLRequest, *URLInfo) error
	DeleteURL(context.Context, *DeleteURLRequest, *DeleteResponse) error
	GetUserURLs(context.Context, *GetUserURLsRequest, *GetUserURLsResponse) error
	UpdateURL(context.Context, *UpdateURLRequest, *UpdateURLResponse) error
}

func RegisterURLShortenerHandler(s server.Server, hdlr URLShortenerHandler, opts ...server.HandlerOption) error {
	type uRLShortener interface {
		ShortenURL(ctx context.Context, in *ShortenRequest, out *ShortenResponse) error
		GetURLInfo(ctx context.Context, in *GetURLRequest, out *URLInfo) error
		DeleteURL(ctx context.Context, in *DeleteURLRequest, out *DeleteResponse) error
		GetUserURLs(ctx context.Context, in *GetUserURLsRequest, out *GetUserURLsResponse) error
		UpdateURL(ctx context.Context, in *UpdateURLRequest, out *UpdateURLResponse) error
	}
	type URLShortener struct {
		uRLShortener
	}
	h := &uRLShortenerHandler{hdlr}
	return s.Handle(s.NewHandler(&URLShortener{h}, opts...))
}

type uRLShortenerHandler struct {
	URLShortenerHandler
}

func (h *uRLShortenerHandler) ShortenURL(ctx context.Context, in *ShortenRequest, out *ShortenResponse) error {
	return h.URLShortenerHandler.ShortenURL(ctx, in, out)
}

func (h *uRLShortenerHandler) GetURLInfo(ctx context.Context, in *GetURLRequest, out *URLInfo) error {
	return h.URLShortenerHandler.GetURLInfo(ctx, in, out)
}

func (h *uRLShortenerHandler) DeleteURL(ctx context.Context, in *DeleteURLRequest, out *DeleteResponse) error {
	return h.URLShortenerHandler.DeleteURL(ctx, in, out)
}

func (h *uRLShortenerHandler) GetUserURLs(ctx context.Context, in *GetUserURLsRequest, out *GetUserURLsResponse) error {
	return h.URLShortenerHandler.GetUserURLs(ctx, in, out)
}

func (h *uRLShortenerHandler) UpdateURL(ctx context.Context, in *UpdateURLRequest, out *UpdateURLResponse) error {
	return h.URLShortenerHandler.UpdateURL(ctx, in, out)
}
