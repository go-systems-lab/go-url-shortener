// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/redirect/redirect.proto

package redirect

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RedirectService service

type RedirectService interface {
	// Resolve short code to original URL
	ResolveURL(ctx context.Context, in *ResolveRequest, opts ...client.CallOption) (*ResolveResponse, error)
	// Track click analytics (async)
	TrackClick(ctx context.Context, in *ClickRequest, opts ...client.CallOption) (*ClickResponse, error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error)
}

type redirectService struct {
	c    client.Client
	name string
}

func NewRedirectService(name string, c client.Client) RedirectService {
	return &redirectService{
		c:    c,
		name: name,
	}
}

func (c *redirectService) ResolveURL(ctx context.Context, in *ResolveRequest, opts ...client.CallOption) (*ResolveResponse, error) {
	req := c.c.NewRequest(c.name, "RedirectService.ResolveURL", in)
	out := new(ResolveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectService) TrackClick(ctx context.Context, in *ClickRequest, opts ...client.CallOption) (*ClickResponse, error) {
	req := c.c.NewRequest(c.name, "RedirectService.TrackClick", in)
	out := new(ClickResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectService) Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error) {
	req := c.c.NewRequest(c.name, "RedirectService.Health", in)
	out := new(HealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RedirectService service

type RedirectServiceHandler interface {
	// Resolve short code to original URL
	ResolveURL(context.Context, *ResolveRequest, *ResolveResponse) error
	// Track click analytics (async)
	TrackClick(context.Context, *ClickRequest, *ClickResponse) error
	// Health check
	Health(context.Context, *HealthRequest, *HealthResponse) error
}

func RegisterRedirectServiceHandler(s server.Server, hdlr RedirectServiceHandler, opts ...server.HandlerOption) error {
	type redirectService interface {
		ResolveURL(ctx context.Context, in *ResolveRequest, out *ResolveResponse) error
		TrackClick(ctx context.Context, in *ClickRequest, out *ClickResponse) error
		Health(ctx context.Context, in *HealthRequest, out *HealthResponse) error
	}
	type RedirectService struct {
		redirectService
	}
	h := &redirectServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RedirectService{h}, opts...))
}

type redirectServiceHandler struct {
	RedirectServiceHandler
}

func (h *redirectServiceHandler) ResolveURL(ctx context.Context, in *ResolveRequest, out *ResolveResponse) error {
	return h.RedirectServiceHandler.ResolveURL(ctx, in, out)
}

func (h *redirectServiceHandler) TrackClick(ctx context.Context, in *ClickRequest, out *ClickResponse) error {
	return h.RedirectServiceHandler.TrackClick(ctx, in, out)
}

func (h *redirectServiceHandler) Health(ctx context.Context, in *HealthRequest, out *HealthResponse) error {
	return h.RedirectServiceHandler.Health(ctx, in, out)
}
